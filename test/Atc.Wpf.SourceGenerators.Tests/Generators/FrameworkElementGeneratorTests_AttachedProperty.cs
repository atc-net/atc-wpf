namespace Atc.Wpf.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class FrameworkElementGeneratorTests
{
    [Fact]
    public void AttachedProperty_Bool_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [AttachedProperty<bool>("IsDraggable")]
            public static partial class DragBehavior
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.FalseBox));
            
                public static bool GetIsDraggable(UIElement element)
                    => element is not null && (bool)element.GetValue(IsDraggableProperty);
            
                public static void SetIsDraggable(UIElement element, bool value)
                    => element?.SetValue(IsDraggableProperty, value);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Bool_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [AttachedProperty<bool>("IsDraggable", DefaultValue = true)]
            public static partial class DragBehavior
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));
            
                public static bool GetIsDraggable(UIElement element)
                    => element is not null && (bool)element.GetValue(IsDraggableProperty);
            
                public static void SetIsDraggable(UIElement element, bool value)
                    => element?.SetValue(IsDraggableProperty, value);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Bool_Name_DefaultValue_Category()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [AttachedProperty<bool>("IsDraggable", DefaultValue = true, Category = "Layout")]
            public static partial class DragBehavior
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));
            
                [Category("Layout")]
                public static bool GetIsDraggable(UIElement element)
                    => element is not null && (bool)element.GetValue(IsDraggableProperty);
            
                [Category("Layout")]
                public static void SetIsDraggable(UIElement element, bool value)
                    => element?.SetValue(IsDraggableProperty, value);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Bool_Name_DefaultValue_Description()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [AttachedProperty<bool>("IsDraggable", DefaultValue = true, Description = "Long description")]
            public static partial class DragBehavior
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));
            
                [Description("Get: Long description")]
                public static bool GetIsDraggable(UIElement element)
                    => element is not null && (bool)element.GetValue(IsDraggableProperty);
            
                [Description("Set: Long description")]
                public static void SetIsDraggable(UIElement element, bool value)
                    => element?.SetValue(IsDraggableProperty, value);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Bool_Name_DefaultValue_Description_Category()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [AttachedProperty<bool>("IsDraggable", DefaultValue = true, Category = "Layout", Description = "Long description")]
            public static partial class DragBehavior
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));
            
                [Category("Layout")]
                [Description("Get: Long description")]
                public static bool GetIsDraggable(UIElement element)
                    => element is not null && (bool)element.GetValue(IsDraggableProperty);
            
                [Category("Layout")]
                [Description("Set: Long description")]
                public static void SetIsDraggable(UIElement element, bool value)
                    => element?.SetValue(IsDraggableProperty, value);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Bool_Name_PropertyChangedCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [AttachedProperty<bool>("IsDraggable", PropertyChangedCallback = nameof(OnIsDraggableChanged))]
            public static partial class DragBehavior
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        propertyChangedCallback: OnIsDraggableChanged));
            
                public static bool GetIsDraggable(UIElement element)
                    => element is not null && (bool)element.GetValue(IsDraggableProperty);
            
                public static void SetIsDraggable(UIElement element, bool value)
                    => element?.SetValue(IsDraggableProperty, value);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}