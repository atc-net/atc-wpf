namespace Atc.Wpf.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class ViewModelGeneratorTests
{
    [Fact]
    public void RelayCommand_NoParameter()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand SaveCommand => new RelayCommand(Save);
            }
            
            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CustomName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MySave")]
                public void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand MySaveCommand => new RelayCommand(Save);
            }
            
            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_MethodHandlerName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void SaveHandler()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand SaveCommand => new RelayCommand(SaveHandler);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_MethodCommandName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void SaveCommand()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand SaveCommandX => new RelayCommand(SaveCommand);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_MethodCommandHandlerName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void SaveCommandHandler()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand SaveCommand => new RelayCommand(SaveCommandHandler);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void Save(string val)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand<string> SaveCommand => new RelayCommand<string>(Save);
            }
            
            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterInt()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void Save(int val)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand<int> SaveCommand => new RelayCommand<int>(Save);
            }
            
            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterTuple()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void Save((LeftTopRightBottomType DirectionType, int StepMoves) data)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand<(LeftTopRightBottomType DirectionType, int StepMoves)> SaveCommand => new RelayCommand<(LeftTopRightBottomType DirectionType, int StepMoves)>(Save);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save()
                {
                }
                
                public bool CanSave()
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand SaveCommand => new RelayCommand(Save, CanSave);
            }
            
            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save(string val)
                {
                }
                
                public bool CanSave()
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand<string> SaveCommand => new RelayCommand<string>(Save, CanSave);
            }
            
            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterInt_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save(int val)
                {
                }
                
                public bool CanSave()
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand<int> SaveCommand => new RelayCommand<int>(Save, CanSave);
            }
            
            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValue_Single()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ParameterValue = LeftTopRightBottomType.Left)]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand TurnDirectionSingleCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Left));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValue_Multi()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MyTestLeft", ParameterValue = LeftTopRightBottomType.Left)]
                [RelayCommand("MyTestTop", ParameterValue = LeftTopRightBottomType.Top)]
                [RelayCommand("MyTestRight", ParameterValue = LeftTopRightBottomType.Right)]
                [RelayCommand("MyTestBottom", ParameterValue = LeftTopRightBottomType.Bottom)]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand MyTestLeftCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Left));

                public IRelayCommand MyTestTopCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Top));

                public IRelayCommand MyTestRightCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Right));

                public IRelayCommand MyTestBottomCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Bottom));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValues_Multi()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MyTestLeft", ParameterValues = [LeftTopRightBottomType.Left, 1])]
                [RelayCommand("MyTestTop", ParameterValues = [LeftTopRightBottomType.Top, 1])]
                [RelayCommand("MyTestRight", ParameterValues = [LeftTopRightBottomType.Right, 1])]
                [RelayCommand("MyTestBottom", ParameterValues = [LeftTopRightBottomType.Bottom, 1])]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType, int steps)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand MyTestLeftCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Left, 1));
            
                public IRelayCommand MyTestTopCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Top, 1));
            
                public IRelayCommand MyTestRightCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Right, 1));
            
                public IRelayCommand MyTestBottomCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Bottom, 1));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValues_Multi_Invalid_DuplicateName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ParameterValues = [LeftTopRightBottomType.Left, 1])]
                [RelayCommand(ParameterValues = [LeftTopRightBottomType.Top, 1])]
                [RelayCommand(ParameterValues = [LeftTopRightBottomType.Right, 1])]
                [RelayCommand(ParameterValues = [LeftTopRightBottomType.Bottom, 1])]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType, int steps)
                {
                }
            }
            """;

        var expectedErrorCodes = new[] { "AtcWpfSG0001" };

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultHasDiagnostics(expectedErrorCodes, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValues_Multi_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MyTestLeft", CanExecute = nameof(CanTurnDirectionSingle), ParameterValues = [LeftTopRightBottomType.Left, 1])]
                [RelayCommand("MyTestTop", CanExecute = nameof(CanTurnDirectionSingle), ParameterValues = [LeftTopRightBottomType.Top, 1])]
                [RelayCommand("MyTestRight", CanExecute = nameof(CanTurnDirectionSingle), ParameterValues = [LeftTopRightBottomType.Right, 1])]
                [RelayCommand("MyTestBottom", CanExecute = nameof(CanTurnDirectionSingle), ParameterValues = [LeftTopRightBottomType.Bottom, 1])]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType, int steps)
                {
                }
                
                public bool CanTurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType, int steps)
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand MyTestLeftCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Left, 1), CanTurnDirectionSingle(LeftTopRightBottomType.Left, 1));
            
                public IRelayCommand MyTestTopCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Top, 1), CanTurnDirectionSingle(LeftTopRightBottomType.Top, 1));
            
                public IRelayCommand MyTestRightCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Right, 1), CanTurnDirectionSingle(LeftTopRightBottomType.Right, 1));
            
                public IRelayCommand MyTestBottomCommand => new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Bottom, 1), CanTurnDirectionSingle(LeftTopRightBottomType.Bottom, 1));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CanExecuteOnProperty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save()
                {
                }
                
                public bool CanSave => return true;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand SaveCommand => new RelayCommand(Save, () => CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString_CanExecuteOnProperty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save(string val)
                {
                }
                
                public bool CanSave => return true;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand<string> SaveCommand => new RelayCommand<string>(Save, _ => CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString_CanExecuteOnObservableProperty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save(string val)
                {
                }

                [ObservableProperty] private bool canSave;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand<string> SaveCommand => new RelayCommand<string>(Save, _ => CanSave);

                public bool CanSave
                {
                    get => canSave;
                    set
                    {
                        if (canSave == value)
                        {
                            return;
                        }

                        canSave = value;
                        RaisePropertyChanged(nameof(CanSave));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString_CanExecuteOnNamedObservableProperty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = "MyCanSave")]
                public void Save(string val)
                {
                }
                
                [ObservableProperty("MyCanSave")] private bool canSave;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IRelayCommand<string> SaveCommand => new RelayCommand<string>(Save, _ => MyCanSave);

                public bool MyCanSave
                {
                    get => canSave;
                    set
                    {
                        if (canSave == value)
                        {
                            return;
                        }

                        canSave = value;
                        RaisePropertyChanged(nameof(MyCanSave));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}