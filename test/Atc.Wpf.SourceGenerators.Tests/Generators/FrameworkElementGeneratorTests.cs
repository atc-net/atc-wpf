namespace Atc.Wpf.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0051:Method is too long", Justification = "OK.")]
public sealed class FrameworkElementGeneratorTests : GeneratorTestBase
{
    [Fact]
    public void DependencyProperty_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.FalseBox));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Name_DefaultValue_Category()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, Category = "Layout")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));
            
                [Category("Layout")]
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Name_DefaultValue_Description()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, Description = "Long description")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));
            
                [Description("Long description")]
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Name_DefaultValue_Category_Description()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, Category = "Layout", Description = "Long description")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Category("Layout")]
                [Description("Long description")]
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Name_PropertyChangedCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", PropertyChangedCallback = nameof(PropertyChangedCallback))]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        propertyChangedCallback: PropertyChangedCallback));
            
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Name_CoerceValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", CoerceValueCallback = nameof(CoerceValueCallback))]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        coerceValueCallback: CoerceValueCallback));
            
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Name_PropertyChangedCallback_CoerceValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback))]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback));
            
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender));
            
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags_DefaultUpdateSourceTrigger()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender, DefaultUpdateSourceTrigger = UpdateSourceTrigger.Default)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using System.Windows.Data;

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender,
                        defaultUpdateSourceTrigger: UpdateSourceTrigger.Default));
            
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags_DefaultUpdateSourceTrigger_IsAnimationProhibited()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender, DefaultUpdateSourceTrigger = UpdateSourceTrigger.Default, IsAnimationProhibited = true)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using System.Windows.Data;

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender,
                        defaultUpdateSourceTrigger: UpdateSourceTrigger.Default,
                        isAnimationProhibited: true));
            
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}