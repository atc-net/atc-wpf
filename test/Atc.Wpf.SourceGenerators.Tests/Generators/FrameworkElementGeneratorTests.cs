namespace Atc.Wpf.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0051:Method is too long", Justification = "OK.")]
public sealed partial class FrameworkElementGeneratorTests : GeneratorTestBase
{
    [Fact]
    public void ClassAccessor_Invalid()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public class TestControl : UserControl
            {
                [RelayCommand]
                public void Save()
                {
                }
            }
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void MultiFiles3_DependencyProperty_IsRunning_And_RelayCommand_NoParameter()
    {
        const string inputCode_MyControl_Inherit =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
            }
            """;

        const string inputCode_MyControl_DependencyProperties =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning")]
            public partial class MyControl
            {
            }
            """;

        const string inputCode_MyControl_RelayCommands =
            """
            namespace TestNamespace;

            public partial class MyControl
            {
                [RelayCommand]
                private void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.Wpf.Command;

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.FalseBox));
            
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }

                public IRelayCommand SaveCommand => new RelayCommand(Save);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(
            inputCode_MyControl_Inherit,
            inputCode_MyControl_DependencyProperties,
            inputCode_MyControl_RelayCommands);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}