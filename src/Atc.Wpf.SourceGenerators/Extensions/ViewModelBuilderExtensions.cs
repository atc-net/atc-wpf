namespace Atc.Wpf.SourceGenerators.Extensions;

internal static class ViewModelBuilderExtensions
{
    public static void GenerateStart(
        this ViewModelBuilder builder,
        ViewModelToGenerate viewModelToGenerate)
    {
        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("#nullable enable");
        if (viewModelToGenerate.RelayCommandsToGenerate?.Count > 0)
        {
            builder.AppendLine("using Atc.Wpf.Command;");
        }

        builder.AppendLine();
        builder.AppendLine($"namespace {viewModelToGenerate.NamespaceName};");
        builder.AppendLine();
        builder.AppendLine($"{viewModelToGenerate.ClassAccessModifier} partial class {viewModelToGenerate.ClassName}");
        builder.AppendLine("{");
        builder.IncreaseIndent();
    }

    public static void GenerateRelayCommands(
        this ViewModelBuilder builder,
        IEnumerable<RelayCommandToGenerate>? relayCommandsToGenerate)
    {
        if (relayCommandsToGenerate is null)
        {
            return;
        }

        foreach (var relayCommandToGenerate in relayCommandsToGenerate)
        {
            GenerateRelayCommand(builder, relayCommandToGenerate);
        }
    }

    public static void GenerateProperties(
        this ViewModelBuilder builder,
        IEnumerable<PropertyToGenerate>? propertiesToGenerate)
    {
        if (propertiesToGenerate is null)
        {
            return;
        }

        foreach (var propertyToGenerate in propertiesToGenerate)
        {
            GenerateProperty(builder, propertyToGenerate);
        }
    }

    private static void GenerateRelayCommand(
        ViewModelBuilder builder,
        RelayCommandToGenerate relayCommandToGenerate)
    {
        builder.AppendLineBeforeMember();

        var interfaceType = relayCommandToGenerate.IsAsync
            ? NameConstants.IRelayCommandAsync
            : NameConstants.IRelayCommand;

        var implementationType = relayCommandToGenerate.IsAsync
            ? NameConstants.RelayCommandAsync
            : NameConstants.RelayCommand;

        if (relayCommandToGenerate.ParameterValues is null)
        {
            var generic = relayCommandToGenerate.ParameterType is null
                ? string.Empty
                : $"<{relayCommandToGenerate.ParameterType}>";

            var constructorParameters = relayCommandToGenerate.CanExecuteMethodName is null
                ? $"{relayCommandToGenerate.MethodName}"
                : $"{relayCommandToGenerate.MethodName}, {relayCommandToGenerate.CanExecuteMethodName}";

            var commandLine = $"public {interfaceType}{generic} {relayCommandToGenerate.CommandName} => new {implementationType}{generic}({constructorParameters});";

            builder.AppendLine(commandLine);
        }
        else
        {
            var constructorParameters = string.Join(", ", relayCommandToGenerate.ParameterValues);

            var commandLine = relayCommandToGenerate.CanExecuteMethodName is null
                ? $"public {interfaceType} {relayCommandToGenerate.CommandName} => new {implementationType}(() => {relayCommandToGenerate.MethodName}({constructorParameters}));"
                : $"public {interfaceType} {relayCommandToGenerate.CommandName} => new {implementationType}(() => {relayCommandToGenerate.MethodName}({constructorParameters}), {relayCommandToGenerate.CanExecuteMethodName}({constructorParameters}));";

            builder.AppendLine(commandLine);
        }
    }

    private static void GenerateProperty(
        ViewModelBuilder builder,
        PropertyToGenerate p)
    {
        builder.AppendLineBeforeMember();
        builder.AppendLine($"public {p.Type} {p.Name}");
        builder.AppendLine("{");
        builder.IncreaseIndent();
        builder.AppendLine($"get => {p.BackingFieldName};");
        builder.AppendLine("set");
        builder.AppendLine("{");
        builder.IncreaseIndent();
        builder.AppendLine($"if ({p.BackingFieldName} == value)");
        builder.AppendLine("{");
        builder.IncreaseIndent();
        builder.AppendLine("return;");
        builder.DecreaseIndent();
        builder.AppendLine("}");
        builder.AppendLine();
        builder.AppendLine($"{p.BackingFieldName} = value;");
        builder.AppendLine($"RaisePropertyChanged(nameof({p.Name}));");
        if (p.PropertyNamesToInvalidate is not null)
        {
            foreach (var propertyNameToInvalidate in p.PropertyNamesToInvalidate)
            {
                builder.AppendLine($"RaisePropertyChanged(nameof({propertyNameToInvalidate}));");
            }
        }

        builder.DecreaseIndent();
        builder.AppendLine("}");
        builder.DecreaseIndent();
        builder.AppendLine("}");
    }
}