namespace Atc.Wpf.SourceGenerators.Extensions.Builder;

[SuppressMessage("Design", "MA0051:Method is too long", Justification = "OK.")]
internal static class ViewModelBuilderExtensions
{
    public static void GenerateStart(
        this ViewModelBuilder builder,
        ViewModelToGenerate viewModelToGenerate)
    {
        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("#nullable enable");
        if (viewModelToGenerate.RelayCommandsToGenerate?.Count > 0)
        {
            builder.AppendLine("using Atc.Wpf.Command;");
        }

        builder.AppendLine();
        builder.AppendLine($"namespace {viewModelToGenerate.NamespaceName};");
        builder.AppendLine();
        builder.AppendLine($"{viewModelToGenerate.ClassAccessModifier} partial class {viewModelToGenerate.ClassName}");
        builder.AppendLine("{");
        builder.IncreaseIndent();
    }

    public static void GenerateProperties(
        this ViewModelBuilder builder,
        IEnumerable<ObservablePropertyToGenerate>? propertiesToGenerate)
    {
        if (propertiesToGenerate is null)
        {
            return;
        }

        foreach (var propertyToGenerate in propertiesToGenerate)
        {
            GenerateProperty(builder, propertyToGenerate);
        }
    }

    private static void GenerateProperty(
        ViewModelBuilder builder,
        ObservablePropertyToGenerate p)
    {
        builder.AppendLineBeforeMember();
        builder.AppendLine($"public {p.Type} {p.Name}");
        builder.AppendLine("{");
        builder.IncreaseIndent();
        builder.AppendLine($"get => {p.BackingFieldName};");
        builder.AppendLine("set");
        builder.AppendLine("{");
        builder.IncreaseIndent();
        builder.AppendLine($"if ({p.BackingFieldName} == value)");
        builder.AppendLine("{");
        builder.IncreaseIndent();
        builder.AppendLine("return;");
        builder.DecreaseIndent();
        builder.AppendLine("}");
        builder.AppendLine();
        if (p.BeforeChangedCallback is not null)
        {
            GenerateCallbackInlineCode(builder, p.BeforeChangedCallback);
            builder.AppendLine();
        }

        if (p.BroadcastOnChange)
        {
            builder.AppendLine($"var oldValue = {p.BackingFieldName};");
        }

        var nameofName = p.Name.EnsureNameofContent();

        builder.AppendLine($"{p.BackingFieldName} = value;");
        builder.AppendLine($"RaisePropertyChanged({nameofName});");
        if (p.PropertyNamesToInvalidate is not null)
        {
            foreach (var propertyNameToInvalidate in p.PropertyNamesToInvalidate)
            {
                var nameofPropertyNameToInvalidate = propertyNameToInvalidate.EnsureNameofContent();

                builder.AppendLine($"RaisePropertyChanged({nameofPropertyNameToInvalidate});");
            }
        }

        if (p.BroadcastOnChange)
        {
            builder.AppendLine($"Broadcast({nameofName}, oldValue, value);");
        }

        if (p.AfterChangedCallback is not null)
        {
            builder.AppendLine();
            GenerateCallbackInlineCode(builder, p.AfterChangedCallback);
        }

        builder.DecreaseIndent();
        builder.AppendLine("}");
        builder.DecreaseIndent();
        builder.AppendLine("}");
    }

    private static void GenerateCallbackInlineCode(
        ViewModelBuilder builder,
        string value)
    {
        if (value.StartsWith("nameof(", StringComparison.Ordinal) &&
            value.EndsWith(")", StringComparison.Ordinal))
        {
            var valueContent = value.ExtractInnerContent();
            var sa = valueContent.Split([';'], StringSplitOptions.RemoveEmptyEntries);
            foreach (var s in sa)
            {
                var line = s.Trim();
                if (line.EndsWith(");", StringComparison.Ordinal))
                {
                    builder.AppendLine(line);
                }
                else if (line.EndsWith(")", StringComparison.Ordinal))
                {
                    builder.AppendLine(line + ";");
                }
                else
                {
                    builder.AppendLine(line + "();");
                }
            }
        }
        else
        {
            var sa = value.Split([';'], StringSplitOptions.RemoveEmptyEntries);
            foreach (var s in sa)
            {
                builder.AppendLine(s.Trim() + ";");
            }
        }
    }
}